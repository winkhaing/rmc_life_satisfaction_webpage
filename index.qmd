---
title: "Self-reported life satisfaction, 2011 to 2023"
subtitle: "Replicating the Our World in Data Grapher"
author: "Win Khaing"
date: "24-07-2024"
theme: yeti
---

<!-- Custom HTML to add logo [DO NOT EDIT THIS SECTION] -->

<img src="Our_World_in_Data_logo.png" style="position:absolute; top:0; right:0; padding:10px;" width="146"/>

<!-- Custom font and style of page [DO NOT EDIT THIS SECTION] -->

<link href='https://fonts.googleapis.com/css?family=Playfair Display' rel='stylesheet'>

```{=html}
<style>
h1 {
    font-family: Playfair Display, Georgia, Times New Roman, "Liberation Serif", serif;
}
</style>
```

```{r include = F}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)

# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(plotly, tidyverse, reactable, here, scales)
```

```{r}
## Import data
cantril <- 
  read_csv(here("data/happiness-cantril-ladder.csv")) %>% 
  rename(Country = Entity)
```

### Happiness across the world over time

The World Happiness Report is a well-known source of cross-country data on self-reported life satisfaction, collected by the Gallup World Poll. The visualizations below present the ‚Äòhappiness scores‚Äô for each country, published these reports.

The main life evaluation question asked in the poll is the Cantril Life Ladder question:

> ‚ÄúPlease imagine a ladder, with steps numbered from 0 at the bottom to 10 at the top. The top of the ladder represents the best possible life for you and the bottom of the ladder represents the worst possible life for you. On which step of the ladder would you say you personally feel you stand at this time?‚Äù

:::{.panel-tabset}
## üî¢ Table

**Average self-reported life satisfaction** ‚Äì Cantril Ladder score (0=worst; 10=best)

```{r}
# In this tab, you will create a table similar to the one on the Our World in Data page. The table should have the following columns:
# Country, `2011`, `2023`, Absolute change, and Relative change.


# Create table
# Step 1: Filter the data for years 2011 and 2023
cantril_filtered <- cantril %>%
  filter(Year %in% c(2011, 2023))

# filtered_data <- cantril[cantril$Year %in% c(2011, 2023), ]

# Step 2: Pivot the data wider
cantril_wide <- cantril_filtered %>%
  pivot_wider(
    names_from = Year,
    values_from = `Cantril ladder score`,
    names_prefix = "score_"
  )

# Step 3: Select required columns
cantril_selected <- cantril_wide %>%
  select(Country, score_2011, score_2023)

# Step 4 & 5: Calculate Absolute and Relative change
cantril_calculated <- cantril_selected %>%
  mutate(
    absolute_change = score_2023 - score_2011,
    relative_change = (score_2023 - score_2011) / score_2011 * 100
  )

# Step 6: Create the reactable
reactable(
  cantril_calculated  %>% 
  select(Country, score_2011, score_2023, absolute_change, relative_change) %>%
    arrange(desc(absolute_change)),
  columns = list(
    Country = colDef(name = "Country", minWidth = 150),
    score_2011 = colDef(name = "2011 Score", format = colFormat(digits = 2)),
    score_2023 = colDef(name = "2023 Score", format = colFormat(digits = 2)),
    absolute_change = colDef(
      name = "Absolute Change",
      format = colFormat(digits = 2),
      style = function(value) {
        if (is.na(value)) return(NULL)
        color <- if (value > 0) "green" else if (value < 0) "red" else "black"
        list(color = color, fontWeight = "bold")
      }
    ),
    relative_change = colDef(
      name = "Relative Change (%)",
      format = colFormat(digits = 2, suffix = "%"),
      style = function(value) {
        if (is.na(value)) return(NULL)
        color <- if (value > 0) "green" else if (value < 0) "red" else "black"
        list(color = color, fontWeight = "bold")
      }
    )
  ),
  defaultSorted = "absolute_change",
  defaultSortOrder = "desc",
  filterable = TRUE,
  searchable = TRUE,
  striped = TRUE,
  highlight = TRUE,
  bordered = TRUE
)
```
## üåé Map

The map plots the average answer that survey respondents provided to this question in different countries. As with the steps of the ladder, values in the map range from 0 to 10.

```{r}
# This code is already done for you. You don't need to change anything here. If you change any of the column names, or something else with the data, you may need to adjust the code below.

# Make boundaries light grey
l <- list(color = toRGB("grey"), width = 0.5)

# Specify map projection/options
g <- list(
  showframe = FALSE,
  coastlinecolor = "grey", # Set coastline color
  coastlinewidth = 0.5, # Set coastline width
  projection = list(type = 'Mercator')
)

# Create choropleth map
cantril %>%
  mutate(`Cantril ladder score` = round(`Cantril ladder score`, 2)) %>%
  plot_geo(width = 940) %>%
  add_trace(
    z = ~`Cantril ladder score`,
    color = ~`Cantril ladder score`,
    zmin = 0, # Set minimum value for color scale
    zmax = 10, # Set maximum value for color scale
    locations = ~Code,
    text = ~Country,
    frame = ~Year, colors = "YlGn",
    marker = list(line = l)
  ) %>%
  colorbar(title = "Ladder Score",
           tickvals = seq(0, 10, by = 2),
           ticktext = seq(0, 10, by = 2)) %>%
  layout(geo = g)
```


## üìà Simple Chart

```{r}
# In this tab, create a simple line chart of the Cantril score over time for a few countries, similar to the one on the Our World in Data page.
# Note that your chart will not have the ability to filter countries like the one on the Our World in Data page.

# Create line chart

# Step 1: Filter the data for 6 selected countries
selected_countries <- c("United States", "China", "India", "Brazil", "Germany", "Nigeria")

filtered_data <- cantril %>%
  filter(Country %in% selected_countries)

# Step 2-6: Create the ggplot chart
p <- ggplot(filtered_data, aes(x = Year, y = `Cantril ladder score`, color = Country)) +
  geom_line(size = 1) +  # Step 3: Use geom_line()
  scale_y_continuous(limits = c(0, 10)) +  # Step 4: Set y-axis limits
  labs(title = "Cantril Ladder Score Over Time",
       x = "Year",
       y = "Cantril Ladder Score",
       color = "Country") +  # Step 5: Create neat labels
  theme_minimal() +  # Step 6: Set the theme
  theme(legend.position = "bottom")

# Step 7: Convert ggplot to plotly
ggplotly(p)


p <- ggplot(filtered_data, aes(x = Year, y = `Cantril ladder score`, color = Country)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  scale_y_continuous(limits = c(2, 8), breaks = seq(2, 8, 1)) +
  scale_x_continuous(breaks = seq(2011, 2023, 2)) +
  labs(title = "Self-reported life satisfaction",
       subtitle = "Average of survey responses to the 'Cantril Ladder' question in the Gallup World Poll",
       x = "",
       y = "Cantril ladder score (0-10)",
       color = "") +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    legend.text = element_text(size = 10),
    panel.grid.minor = element_blank()
  ) +
  scale_color_brewer(palette = "Set2")

# Step 7: Convert ggplot to plotly
ggplotly(p, tooltip = c("Entity", "Year", "Cantril ladder score")) %>%
  layout(
    hovermode = "x unified",
    legend = list(orientation = "v", x = 1.02, y = 0.5)
  )
```

## üìà Advanced Chart

One problem with the simple chart on the previous tab is that the countries are fixed. It would be better if the user could select the countries they want to see. This is not possible with `plotly` alone, but with the `crosstalk` package and some custom JavaScript, we can achieve this, as demonstrated below.

This is simply a demonstration for you, you do not need to work on this for your assignment. You may want to come back to this when you need such functionality in your own projects.

For more information on how we achieved this, see [this Stack Overflow question](https://stackoverflow.com/questions/67058016/how-to-set-default-values-in-filter-select-in-crosstalk-in-r-plotly).


```{r}
pacman::p_load(crosstalk, plotly)

# Crosstalk shared data object
# This allows the filter to interact with the plot
shared_cantril_data <- highlight_key(cantril)

cantril_plotly <- plot_ly(
  shared_cantril_data, 
  x = ~Year, 
  y = ~`Cantril ladder score`, 
  color = ~Country, 
  type = "scatter", 
  mode = "lines+markers"
) %>%
  layout(yaxis = list(range = c(0, 10)))


country_filter <- filter_select(
  "country_filter", 
  "Select a country to examine", 
  shared_cantril_data, 
  ~Country, 
  multiple = TRUE
)

# Output the filter and the plot
bscols(
  list(country_filter, cantril_plotly)
)
```
:::
<!-- Custom javascript to set default values in the filter: -->
<script>
function filter_default() {
  var default_countries = ["Norway", "Australia", "Germany", "Bolivia", "Colombia", "Bhutan"]; // Set default countries here
  document.getElementById("country_filter").getElementsByClassName("selectized")[0].selectize.setValue(default_countries, false);
}
window.onload = filter_default;
</script>

# {.unlisted}

Data source: World Happiness Report

[OurWorldInData.org/happiness-and-life-satisfaction](https://ourworldindata.org/grapher/happiness-cantril-ladder) | CC BY
